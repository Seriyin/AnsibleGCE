- name: Make the DB instance active.
  hosts: localhost
  vars_files:
    - vars/config.yml
    - vars/db.yml
    - vars/gce.yml
    - vars/vault.yml
  roles:
    - make_instance
    - make_instance_active
    - wait_ssh

- name: Install and run DB-server from the DB instance
  hosts: "tag_{{db_name}}"
  vars_files:
    - vars/config.yml
    - vars/db.yml
    - vars/vault.yml
  become: true
  become_method: sudo
  roles:
    - common
    - db_docker


- name: Create and activate some magento VMs to be swarm managers based on number in magento.yml
  hosts: localhost
  vars_files:
    - vars/config.yml
    - vars/magento.yml
    - vars/magento_manager.yml
    - vars/gce.yml
    - vars/vault.yml
  vars: 
    number_VMs: {{replicate_VMs // 2}}
  roles:
    - make_instance
    - make_instance_active


- name: Create and activate some magento VMs to be swarm workers based on number in magento.yml
  hosts: localhost
  vars_files:
    - vars/config.yml
    - vars/magento.yml
    - vars/magento_worker.yml
    - vars/gce.yml
    - vars/vault.yml
  vars: 
    number_VMs: {{replicate_VMs // 2 + replicate_VMs % 2}}
  roles:
    - make_instance
    - make_instance_active



- name: Setup docker and magento base to all magento VMs.
  hosts: "tag_{{magento_name}}"
  connection: ssh
  become: true
  become_method: sudo
  vars_files:
    - vars/config.yml
    - vars/vault.yml
  roles:
    - common
    - magento_docker_setup


# Thanks to https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/
# determine the status of each manager node and break them
# into two groups:
#   - swarm_manager_operational (swarm is running and active)
#   - swarm_manager_bootstrap (host needs to be joined to the cluster)
- name: Setup docker swarm to swarm manager group.
  hosts: tag_manager
  become: true
  become_method: sudo
  tasks:
    - name: load docker info as facts
      docker_info_facts:

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'{{ hostvars[item]['docker_info']['Swarm']['LocalNodeState'] }}' == 'active'"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'{{ hostvars[item]['docker_info']['Swarm']['LocalNodeState'] }}' != 'active'"
      run_once: true

# determine the status of each worker node and break them
# into two groups:
#   - swarm_worker_operational (host is joined to the swarm cluster)
#   - swarm_worker_bootstrap (host needs to be joined to the cluster)
- name: Setup docker swarm to swarm worker group.
  hosts: tag_worker
  become: true
  become_method: sudo
  tasks:
    - name: load docker info as facts
      docker_info_facts:

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'{{ hostvars[item]['docker_info']['Swarm']['LocalNodeState'] }}' == 'active'"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'{{ hostvars[item]['docker_info']['Swarm']['LocalNodeState'] }}' != 'active'"
      run_once: true


# when the swarm_manager_operational group is empty, meaning there
# are no hosts running swarm, we need to initialize one of the hosts
# then add it to the swarm_manager_operational group
- hosts: swarm_manager_bootstrap[0]
  become: true
  become_method: sudo
  tasks:
    - name: initialize swarm cluster
      shell: docker swarm init --advertise-addr={{ swarm_iface | default('eth0') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed

# retrieve the swarm tokens and populate a list of ips listening on
# the swarm port 2377
- hosts: swarm_manager_operational[0]
  become: true
  become_method: sudo
  vars:
    iface: "{{ swarm_iface | default('eth0') }}"
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"


# join the hosts not yet initialized to the swarm cluster
- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  become_method: sudo
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: docker swarm join --advertise-addr={{ swarm_iface | default('eth0') }}:2377 --token={{ token }} {{ groups['swarm_manager_ips'][0] }}:2377


# join the remaining workers to the swarm cluster
- hosts: swarm_worker_bootstrap
  become: true
  become_method: sudo
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: docker swarm join --advertise-addr={{ swarm_iface | default('eth0') }}:2377 --token={{ token }} {{ groups['swarm_manager_ips'][0] }}:2377

- name: Docker stack deploy on swarm
  hosts: swarm_manager_operational[0]
  become: true
  become_method: sudo
  vars_files:
    - vars/config.yml
    - vars/vault.yml
  roles:
    - magento_docker

- name: Generate and activate a load balancing service
  hosts: localhost
  vars_files:
    - vars/magento.yml
    - vars/vault.yml
    - vars/gce.yml
    - vars/lb_hc.yml
  roles:
    - make_lb_service
    - make_lb_service_active
